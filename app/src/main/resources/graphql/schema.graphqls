type AccountsQuery {
    account(id: ID, nickname: String): Account!
}

type CompanyQuery {
    company(id: ID, codename: String): Company!
}

type Account {
    id: ID!
    username: String!
    data: AccountData!
}

type AccountData {
    name: String!
}

type CompanyData {
    title: String!
}

type CompanyMember {
    id: ID!
    account: Account!
}


type CompanyOwner {
    id: ID!
    member: CompanyMember!
}

type Employee {
    id: ID!
    username: String!
    data: EmployeeData!
    company: Company!
    placements: [CompanyPlacement!]
}

input AddEmployeeInput {
    companyId: ID!
    username: String!
    name: String!
}

input AddEmployeeToPlacementInput {
    employeeId: ID!
    placementId:ID!
}

type EmployeesMutation {
    addEmployee(input: AddEmployeeInput!): Employee!
    addToPlacement(input: AddEmployeeToPlacementInput!): Employee!
}

type EmployeeData {
    name: String!
    description: String
}

type Company{
    id: ID!
    codename: String!
    data: CompanyData!
    owner: CompanyOwner!
    members: [CompanyMember!]!,
    placements: [CompanyPlacement!]!
    employees: [Employee!]!
    services: [Service!]!
    customers: [Customer!]!
}



type CompanyPlacementMember{
    id: ID!
    account: Account!
}

type CompanyPlacementData {
    title: String!
}

type CompanyPlacement {
    id: ID!
    company: Company!
    codename: String!
    data: CompanyPlacementData!
    members: [CompanyPlacementMember!]!
}

interface ServiceInfo {
    durationOfWork: Int!
}

type TimesLimitedServiceInfo implements ServiceInfo {
    durationOfWork: Int!
    times: Int!
}

type Service {
    id: ID!
    company: Company!
    info: ServiceInfo!
    data: ServiceData!
    placements: [CompanyPlacement!]!
}

type ServiceData {
    title: String!
    description: String!
}

type ServicesQuery {
    service(id: ID!): Service!
}


input AddCompanyInput {
    codename: String!
    title: String!
}

input AddServiceToPlacementInput {
    placementId: ID!
    serviceId: ID!
}

input AddPlacementInput {
    companyId: ID!
    codename: String!
    title: String!
    addToMembers: Boolean!
}

type CompaniesMutation {
    addCompany(input: AddCompanyInput!): Company!
    addPlacement(input: AddPlacementInput): CompanyPlacement!
}

input AddTimesLimitedServiceInput {
    companyId: String!
    title: String!
    description: String!
    times: Int!
    durationOfWork: Int!
}

type ServicesMutation {
    addTimesLimitedService(input: AddTimesLimitedServiceInput!): Service!
    addToPlacement(input: AddServiceToPlacementInput!): Service!
}

type CustomersQuery {
    customer(id: ID): Customer!
    card(token: String): Card!
}

type Card {
    token: String!
    customer: Customer
}


type Customer {
    id: ID!
    data: CustomerData!
    card: Card
}

type CustomerData {
    name: String!
    description: String
}

input AddCustomerAndCardInput {
    companyId: ID!
    name: String!
    description: String
}

type CustomersMutation {
    addCustomerAndCard(input: AddCustomerAndCardInput!): Card!
}

type Session {
    id: ID!
    data: SessionData!
    customer: Customer!
    service :Service!
    company: Company!
    employees: [Employee!]!
    usages: [SessionUsage!]!
}

type SessionData {
    description: String
}

type SessionUsage {
    id: ID!
    data: SessionUsageData!
    session: Session!
    employees: [Employee!]!
}

type SessionUsageData {
    description: String
}

type SessionsQuery{
    session(id: ID!): Session!
}

input AddSessionInput {
    serviceId: ID!
    customerId: ID!
    employeesIds: [ID!]!
    description: String
}

input UseSessionInput {
    sessionId: ID!
    employeesIds: [ID!]!
    description: String
}

type SessionsMutation {
    addSession(input: AddSessionInput!): Session!
    useSession(input: UseSessionInput!): SessionUsage!
}

type Query {
    accounts: AccountsQuery!
    companies: CompanyQuery!
    services: ServicesQuery!
    customers: CustomersQuery!
    sessions: SessionsQuery!
}


type Mutation {
    companies: CompaniesMutation!
    services: ServicesMutation!
    employees: EmployeesMutation!
    customers: CustomersMutation!
    sessions: SessionsMutation!
}